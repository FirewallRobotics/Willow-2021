// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.XboxController;
//import edu.wpi.first.wpilibj.XboxController.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public XboxController firstController;
    public XboxController secondController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        firstController = new XboxController(0);
        secondController = new XboxController(1);

        JoystickButton firstA = new JoystickButton(firstController, XboxController.Button.kA.value);
        JoystickButton firstB = new JoystickButton(firstController, XboxController.Button.kB.value);
        JoystickButton firstX = new JoystickButton(firstController, XboxController.Button.kX.value);
        JoystickButton firstY = new JoystickButton(firstController, XboxController.Button.kY.value);
        JoystickButton firstBumperLeft = new JoystickButton(firstController, XboxController.Button.kBumperLeft.value);
        JoystickButton firstBumperRight = new JoystickButton(firstController, XboxController.Button.kBumperRight.value);
        JoystickButton firstStickLeft = new JoystickButton(firstController, XboxController.Button.kStickLeft.value);
        JoystickButton firstStickRight = new JoystickButton(firstController, XboxController.Button.kStickRight.value);
        JoystickButton firstBack = new JoystickButton(firstController, XboxController.Button.kBack.value);
        JoystickButton firstStart = new JoystickButton(firstController, XboxController.Button.kStart.value);
        
        JoystickButton secondA = new JoystickButton(secondController, XboxController.Button.kA.value);
        JoystickButton secondB = new JoystickButton(secondController, XboxController.Button.kB.value);
        JoystickButton secondX = new JoystickButton(secondController, XboxController.Button.kX.value);
        JoystickButton secondY = new JoystickButton(secondController, XboxController.Button.kY.value);
        JoystickButton secondBumperLeft = new JoystickButton(secondController, XboxController.Button.kBumperLeft.value);
        JoystickButton secondBumperRight = new JoystickButton(secondController, XboxController.Button.kBumperRight.value);
        JoystickButton secondStickLeft = new JoystickButton(secondController, XboxController.Button.kStickLeft.value);
        JoystickButton secondStickRight = new JoystickButton(secondController, XboxController.Button.kStickRight.value);
        JoystickButton secondBack = new JoystickButton(secondController, XboxController.Button.kBack.value);
        JoystickButton secondStart = new JoystickButton(secondController, XboxController.Button.kStart.value);

    //This is what the buttons do when they are pressed. First references the black xbox controller which drives
    //second references the pink xbox controller which controls the shooter functions and the intake and indexer
        //xbox controller 1
        //irstA.whenPressed(new DriveToPowerCell());
        //firstA.whenPressed( new IntakeCommand());
        firstB.whenPressed(new IndexerCommand());
        //firstX.whenPressed(new StopIndexer());
        firstY.whenPressed(new ShooterMoveCommand());
        firstBumperLeft.whileHeld(new ExtendArmsCommand());
        firstBumperLeft.whenReleased(new StopArmsCommand());
        firstBumperRight.whileHeld(new PullupCommand());
        //firstStart.whenPressed(new ClimbCommand());
        firstBack.whenPressed(new StopShooter());
        firstStickLeft.whenPressed(new ShooterMoveCommand());
        //xbox controller 2
        secondA.whileHeld(new IntakeCommand());
        secondA.whenReleased(new IntakeStopCommand());
        secondB.whileHeld(new IndexerCommand());
        secondB.whenReleased(new StopIndexer());
        secondX.whenPressed(new ExtendIntake());
        //secondY.whenPressed(new ShootUpperPowerCells());
        //secondBack.whenPressed(new ExtendIntake());
        //secondBack.whenPressed(new IntakeCommand());
        secondStart.whenPressed(new RetractIntake());
        //secondX.whenPressed(new FlushIndexerCommand(RobotMap.FLUSH_INDEXER_TIME));
        secondY.whileHeld(new StartShooterCommand());
        secondY.whenReleased(new StopShooter());
        secondBumperLeft.whenPressed(new ShootUpperPowerCells());
        //secondBumperLeft.whenReleased(new StopShooter());
        secondBack.whenPressed(new CapturePowerCell());
        //secondStart.whenPressed();
        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController get1stXboxController() {
        return firstController;
    }
    public XboxController get2ndXboxController() {
        return secondController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS



