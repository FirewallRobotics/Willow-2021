// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
//import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;
import java.nio.file.Path;
import java.util.List;

import edu.wpi.first.cameraserver.CameraServer;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.controller.RamseteController;
import edu.wpi.first.wpilibj.controller.SimpleMotorFeedforward;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.geometry.Translation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.trajectory.*;
import edu.wpi.first.wpilibj.trajectory.constraint.*;
import edu.wpi.first.wpilibj2.command.RamseteCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

    public static final DoubleSolenoid firstSolenoid = new DoubleSolenoid(4, 5);
    public static final DoubleSolenoid secondSolenoid = new DoubleSolenoid(6, 7);
    private static final int kEncoderPortA = 0;
    private static final int kEncoderPortB = 1;
    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    String driveString;
    SendableChooser<String> driveChooser = new SendableChooser<>();

    public static OI oi;
    //public static DifferentialDrive m_myRobot;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Shooter shooter;
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static WheelSpinner wheelSpinner;
    public static Indexer indexer;
    public static Elevator elevator;
    public static NetworkTable table;
    private Encoder m_encoder;
    public RamseteController ramseteController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be used
     * for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooter = new Shooter();
        driveTrain = new DriveTrain();
        intake = new Intake();
        wheelSpinner = new WheelSpinner();
        indexer = new Indexer();
        elevator = new Elevator();
        CameraServer.getInstance().startAutomaticCapture();

        // m_encoder = new Encoder(kEncoderPortA, kEncoderPortB);
        // Use SetDistancePerPulse to set the multiplier for GetDistance
        // This is set up assuming a 6 inch wheel with a 360 CPR encoder.
        // m_encoder.setDistancePerPulse((Math.PI * 6) / 360.0);
        // camera = new Camera();
        // logicEngine = new LogicEngine();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        // (which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        // chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);

        driveChooser.setDefaultOption("ArcadeDrive", new String());
        driveChooser.addOption("CurvatureDrive", new String());
        driveChooser.addOption("TankDrive", new String());
        SmartDashboard.putData("DriveChoice", driveChooser);
        // autonomousCommand = new NewDriveForwardCommand();
        //autonomousCommand = new AutonomousShoot();
        //autonomousCommand = getAutonomousCommand();
    }

    public Command getAutonomousCommand() {

        // Create a voltage constraint to ensure we don't accelerate too fast
        /*var autoVoltageConstraint =
            new DifferentialDriveVoltageConstraint(
                new SimpleMotorFeedforward(RobotMap.ksVolts,
                                           RobotMap.SecondsPerMeter,
                                           RobotMap.kaVoltSecondsSquaredPerMeter),
                RobotMap.kDriveKinematics,
                10);*/
    
        /*String trajectoryJSON = "paths/slalompath.json";
        Trajectory trajectory = new Trajectory();
        try {
            Path trajectoryPath = Filesystem.getDeployDirectory().toPath().resolve(trajectoryJSON);
            trajectory = TrajectoryUtil.fromPathweaverJson(trajectoryPath);
        } catch (IOException ex) {
            DriverStation.reportError("Unable to open trajectory: " + trajectoryJSON, ex.getStackTrace());
        }*/
    
            // Create a voltage constraint to ensure we don't accelerate too fast
    var autoVoltageConstraint =
    new DifferentialDriveVoltageConstraint(
        new SimpleMotorFeedforward(1.65,
                                   1.14,
                                   .0152),
        new DifferentialDriveKinematics(1.40786010565637),
        10);

// Create config for trajectory
TrajectoryConfig config =
    new TrajectoryConfig(5,5)
        // Add kinematics to ensure max speed is actually obeyed
        .setKinematics(new DifferentialDriveKinematics(1.40786010565637))
        // Apply the voltage constraint
        .addConstraint(autoVoltageConstraint);

// An example trajectory to follow.  All units in meters.
Trajectory trajectory = TrajectoryGenerator.generateTrajectory(
    // Start at the origin facing the +X direction
    new Pose2d(0, 0, new Rotation2d(0)),
    // Pass through these two interior waypoints, making an 's' curve path
    List.of(
        new Translation2d(1, 1),
        new Translation2d(2, -1)
    ),
    // End 3 meters straight ahead of where we started, facing forward
    new Pose2d(3, 0, new Rotation2d(0)),
    // Pass config
    config
);
        RamseteCommand ramseteCommand = new RamseteCommand(
            trajectory,
            driveTrain::getPose,
            new RamseteController(),
            new SimpleMotorFeedforward(1.65,
                                       1.14,
                                       .0152),
            new DifferentialDriveKinematics(1.40786010565637),
            driveTrain::getWheelSpeeds,
            new PIDController(1.64e-9, 0, 0),
            new PIDController(1.64e-9, 0, 0),
            // RamseteCommand passes volts to the callback
            driveTrain::tankDriveVolts
        );

        // Reset odometry to the starting pose of the trajectory.
        driveTrain.m_odometry(trajectory.getInitialPose());

        // Run path following command, then stop at the end.
        return ramseteCommand.andThen(() -> driveTrain.tankDriveVolts(0, 0));
        //return ramseteCommand.andThen(());
      }
    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        CommandScheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        //autonomousCommand = chooser.getSelected();
        //autonomousCommand = new AutonomousCommand();
        // schedule the autonomous command (example)
        //if (autonomousCommand != null) autonomousCommand.start();
        autonomousCommand = getAutonomousCommand();
        System.out.println("Entering Auto");
        System.out.println(autonomousCommand);
        // schedule the autonomous command (example)
        if (autonomousCommand != null) {
          autonomousCommand.schedule();
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        CommandScheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        CommandScheduler.getInstance().run();
    }
}
